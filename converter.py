import requests
import json 
import csv
from selenium import webdriver
from cvss import CVSS2


def write():
    with open('converted.csv', 'w') as output:
        output.write('cve id, description, CVSS score, CVSS V2 Vector, status, comments \n \n')
        output.write(f'"{columns[0]}","{columns[1]}","{columns[2]}","{columns[3]}","{columns[4]}","{columns[5]}"')


def status_and_comments(text):
    with open('allitems.csv', encoding = 'latin-1') as csv_file: 
        global comment
        global status
        text_csv = csv.reader(csv_file)
        for line in text_csv:
            if cve_id in line:
                for status in line:
                    if status == 'Entry' or status == 'Candidate':
                        columns.append(status)
                        print()
                if line[6]:
                    comment = line[6].replace('"', '""')
                    comment = line[6].replace("\n", "")
                    columns.append(comment)
                else:
                    comment = None
                    columns.append(comment)
                write()


def alternative_scraping(): # read ** UNSUPPORTED WHEN ASSIGNED ** and other unusual files like CVE-2023-49210
    driver = webdriver.Chrome()
    driver.get(f'https://nvd.nist.gov/vuln/detail/{cve_id}')
    page = driver.page_source
    desc_index = page.find('"vuln-description">')
    finish_index = page.find('</p>', desc_index)
    description = page[desc_index+19:finish_index].replace('"', '""').replace("\n", "")
    columns.append(description)
    try: 
        vector_index = page.find("'vuln-cvssv2-vector'>(")
        vector = page[vector_index+22:vector_index+48]
        if vector.startswith('AV'):
            columns.append(vector)
        else:
            raise Exception
    except:
        vector = None
        score = None
        columns.append(score)
        columns.append(vector)
    try:
        score = CVSS2(vector).scores()[0]
        columns.append(score)
    except:
        score = None
    driver.quit()
    

def request_api():
    link = f'https://cve.circl.lu/api/cve/{cve_id}'
    api = requests.get(link).text
    json_dict = json.loads(api)
    try:
        description = json_dict.get('summary').replace('"', '""').replace("\n", "")
        score = json_dict.get('cvss')
        vector = json_dict.get('cvss-vector')
        columns.append(description)
        columns.append(score)
        columns.append(vector)
        
    except:
        print('API do not have that record')
        alternative_scraping()


def look_for_id():
    with open(input_file, 'r', encoding='utf-8') as json_file:
        global cve_id
        text_json = json.load(json_file)
        for key, value in text_json.items():
            if 'cveId' in value:
                for cve_id in value.values():
                    if cve_id.startswith('CVE'):
                        columns.append(cve_id)
                        request_api()
                        status_and_comments(text_json)


columns = []
while True:
    try: 
        input_file = input(r'Enter the path to the file: ').replace('"', '')
        if len(input_file) == 0:
            raise Exception 
        else:
            break
    except:
        print('Try again')
look_for_id()
